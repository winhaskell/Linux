 # script
Script started, file is typescript

 #  script myfile
Script started, file is myfile

 # script collaborate
Script started, file is collaborate
 
 # echo {1..10}
1 2 3 4 5 6 7 8 9 10

 # echo {1..10..2}
1 3 5 7 9

 # echo {10..1..2}
10 8 6 4 2

 # echo {000..121..2}
000 002 004 006 008 010 012 014 016 018 020 022 024 026 028 030 032 034 036 038 040 042 044 046 048 050 052 054 056 058 060 062 064 066
068 070 072 074 076 078 080 082 084 086 088 090 092 094 096 098 100 102 104 106 108 110 112 114 116 118 120
 
 # mkdir {2009..2019}_Invoices
 
 # rm frame_{043..61..3}
rm: cannot remove ‘frame_043’: No such file or directory
rm: cannot remove ‘frame_046’: No such file or directory
rm: cannot remove ‘frame_049’: No such file or directory
rm: cannot remove ‘frame_052’: No such file or directory
rm: cannot remove ‘frame_055’: No such file or directory
rm: cannot remove ‘frame_058’: No such file or directory
rm: cannot remove ‘frame_061’: No such file or directory
 # touch file_{a..z}.txt
 #

 # myvar="Hello"
 # echo $myvar
Hello



uptime
 13:14pm  up 102 days  0:39,  4 users,  load average: 0.96, 1.11, 1.24

uptime 命令会告诉你系统运行了多长时间。它会用一行显示以下信息。
当前时间、系统运行时间、当前登录用户的数量、过去 1 分钟/5 分钟/15 分钟系统负载的均值。



 # w
 12:28:52 up 102 days, 41 min,  4 users,  load average: 1.83, 1.39, 1.32
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
        pts/1    1.2.3.4          12:20    1.00s  0.03s  0.03s -sudosh
        pts/2    1.2.3.4          13:15    1.00s  0.03s  0.00s script myfile
        pts/3    1.2.3.4          13:16    1.00s  0.04s  0.00s script collaborate
        pts/4    1.2.3.4          13:16    1.00s  0.06s  0.00s w

w 命令为每个登录进系统的用户，每个用户当前所做的事情，所有活动的负载对计算机的影响提供了一个快速的概要。
这个单一命令结合了多个 Unix 程序：who、uptime，和 ps -a 的结果。




top 命令是 Linux 上监视实时系统进程的基础命令之一。
它显示系统信息和运行进程的信息，例如正常运行时间、平均负载、运行的任务、登录用户数量、CPU 数量 & CPU 利用率、内存 & 交换空间信息。

  PID    USER  PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
   aaa     35  15  105416  95944    924 R 100.0 0.196 270:54.33  
   bbb     20   0 43.549g 0.027t  18728 S 4.319 59.13   1478:08  
           20   0   29696   1860   1272 R 0.332 0.004   0:00.15  
           20   0  181844   4560   1940 S 0.000 0.009  11:03.57  
           20   0       0      0      0 S 0.000 0.000   0:01.41  
           
           
           
ls -l /etc | more
管线命令 （pipe）
就如同前面所说的， bash 命令执行的时候有输出的数据会出现！ 
那么如果这群数据必需要经过几道手续之后才能得到我们所想要的格式，应该如何来设置？ 
这就牵涉到管线命令的问题了 （pipe） ，管线命令使用的是“ | ”这个界定符号！ 

ls -al /etc &#124; less

echo ${PATH}
将 PATH 变量取出，要找出第五个路径。
echo ${PATH} &#124; cut -d ':' -f 5

