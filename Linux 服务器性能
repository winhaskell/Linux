Linux 服务器性能 
https://www.infoq.cn/article/2015%2F12%2Flinux-performance

通过执行以下命令，可以在 1 分钟内对系统资源使用情况有个大致的了解。

uptime
 
The “memory” section shows information regarding the memory usage of the system. The lines marked “Mem” and “Swap” show information
about RAM and swap space respectively. Simply put, a swap space is a part of the hard disk that is used like RAM. When the RAM usage
gets nearly full, infrequently used regions of the RAM are written into the swap space, ready to be retrieved later when needed. 
However, because accessing disks are slow, relying too much on swapping can harm system performance.

As you would naturally expect, the “total”, “free” and “used” values have their usual meanings. 
The “avail mem” value is the amount of memory that can be allocated to processes without causing more swapping.

The Linux kernel also tries to reduce disk access times in various ways. It maintains a “disk cache” in RAM, 
where frequently used regions of the disk are stored. In addition, disk writes are stored to a “disk buffer”, 
and the kernel eventually writes them out to the disk. The total memory consumed by them is the “buff/cache” value. 
It might sound like a bad thing, but it really isn’t — memory used by the cache will be allocated to processes if needed.


System time, uptime and user sessions

The “Tasks” section shows statistics regarding the processes running on your system.
The “total” value is simply the total number of processes. For example, in the above screenshot, there are 188 processes running.
To understand the rest of the values, we need a little bit of background on how the Linux kernel handles processes.

The CPU usage section shows the percentage of CPU time spent on various tasks. 
The us value is the time the CPU spends executing processes in userspace. Similarly, 
the sy value is the time spent on running kernelspace processes.

Linux uses a “nice” value to determine the priority of a process. A process with a high “nice” value is “nicer” to other processes, 
and gets a low priority. Similarly, processes with a lower “nice” gets higher priority. 
As we shall see later, the default “nice” value can be changed. The time spent on executing processes with a manually set
“nice” appear as the ni value.

This is followed by id, which is the time the CPU remains idle. Most operating systems put the CPU on a power saving mode 
when it is idle. Next comes the wa value, which is the time the CPU spends waiting for I/O to complete.

Interrupts are signals to the processor about an event that requires immediate attention. Hardware interrupts are 
typically used by peripherals to tell the system about events, such as a keypress on a keyboard. On the other hand, 
software interrupts are generated due to specific instructions executed on the processor. In either case, the OS handles them, 
and the time spent on handling hardware and software interrupts are given by hi and si respectively.

In a virtualized environment, a part of the CPU resources are given to each virtual machine (VM). 
The OS detects when it has work to do, but it cannot perform them because the CPU is busy on some other VM. 
The amount of time lost in this way is the “steal” time, shown as st.

The load average section represents the average “load” over one, five and fifteen minutes. 
“Load” is a measure of the amount of computational work a system performs. 
On Linux, the load is the number of processes in the R and S states at any given moment. 
The “load average” value gives you a relative measure of how long you must wait for things to get done.

Let us consider a few examples to understand this concept. On a single core system, a load average of 0.4 means 
the system is doing only 40% of work it can do. A load average of 1 means that the system is exactly at capacity — the 
system will be overloaded by adding even a little bit of additional work. A system with a load average of 2.12 means
that it is overloaded by 112% more work than it can handle.

On a multi-core system, you should first divide the load average with the number of CPU cores to get a similar measure.

In addition, “load average” isn’t actually the typical “average” most of us know. It is an “exponential moving average“, 
which means a small part of the previous load averages are factored into the current value. If you’re interested, 
this article covers all the technical details.



其中一些命令需要安装 sysstat 包，有一些由 procps 包提供。
这些命令的输出，有助于快速定位性能瓶颈，检查出所有资源（CPU、内存、磁盘 IO 等）的利用率（utilization）、饱和度（saturation）和错误（error）度量，
也就是所谓的USE方法。


https://www.booleanworld.com/guide-linux-top-command/
https://www.youtube.com/watch?v=y_vAFd7Uk5U


Understanding top’s interface: the task area
The summary area is comparatively simpler, and it contains a list of processes. In this section, we will learn about the 
different columns shown in top’s default output.


PID
This is the process ID, an unique positive integer that identifies a process.

USER
This is the “effective” username (which maps to an user ID) of the user who started the process. Linux assigns a real user ID 
and an effective user ID to processes; the latter allows a process to act on behalf of another user. 
(For example, a non-root user can elevate to root in order to install a package.)

PR and NI
The “NI” field shows the “nice” value of a process. The “PR” field shows the scheduling priority of the process from the 
perspective of the kernel. The nice value affects the priority of a process.

VIRT, RES, SHR and %MEM
These three fields are related with to memory consumption of the processes. “VIRT” is the total amount of memory consumed by 
a process. This includes the program’s code, the data stored by the process in memory, as well as any regions of memory that 
have been swapped to the disk. “RES” is the memory consumed by the process in RAM, and “%MEM” expresses this value as a percentage 
of the total RAM available. Finally, “SHR” is the amount of memory shared with other processes.

S
As we have seen before, a process may be in various states. This field shows the process state in the single-letter form.

TIME+
This is the total CPU time used by the process since it started, precise to the hundredths of a second.

COMMAND
The COMMAND column shows the name of the processes.

Top command usage examples
So far, we have discussed about top’s interface. However, it can also manage processes, and you can control various aspects of top’s
output. In this section, we’re going to take at a few examples.

In most of the examples below, you have to press a key while top is running. Keep in mind that these keypresses are case sensitive
— so if you press “k” while Caps Lock is on, you have actually pressed a “K”, and the command won’t work, or do something else entirely.


https://www.lifewire.com/linux-top-command-2201163
How To Use The Linux Top Command To Show Running Processes
